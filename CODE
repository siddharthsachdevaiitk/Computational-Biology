import random
random_numbers = []

random_number = int(random.uniform(0, 20))
random_numbers.append(random_number)

for i in range(4):
  random_numbers.append(random_number+10*(i+1))
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

def ffl_simulation():
    p = {
        'alphaX': 1,
        'alphaY': 1,
        'gammaX': 1,
        'gammaY': 1,
        'par': 1
    }
    t = np.arange(0, 60, 0.01)

    u = np.zeros(len(t))
    for i in range(len(t)):
        if t[i] < 10:
            u[i] = 1
        elif t[i] < 30:
            u[i] = 2
        else:
            u[i] = 4

    x0 = (p['alphaX'] * u[0] * p['par']) / (p['gammaX'])
    y0 = (p['alphaY'] * u[0] * p['par']) / (x0 * p['gammaY'])
    sx0 = (p['alphaX'] * u[0] * p['par']) / (p['gammaX'])
    sy0 = 0

    xy0 = [x0, y0, sx0, sy0]

    xy = odeint(iffl1, xy0, t, args=(p,))

    plt.figure(1)
    plt.plot(t, xy[:, 0], 'k', linewidth=2)
    plt.ylabel('x')
    plt.xlabel('time')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.ylim([0.8, 4.2])
    plt.show()

    plt.figure(2)
    plt.plot(t, xy[:, 1], 'k', linewidth=2)
    plt.xlabel('time')
    plt.ylabel('y')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.ylim([0.95, 1.3])
    plt.show()

    plt.figure(3)
    plt.plot(t, u, 'k', linewidth=2)
    plt.xlabel('time')
    plt.ylabel('u')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.ylim([0.8, 4.2])
    plt.show()

def iffl1(xy0, t, p):
    x, y, sx, sy = xy0

    if t < 10:
        u = 1
    elif t < 30:
        u = 2
    else:
        u = 4

    xdot = p['alphaX'] * u * p['par'] - p['gammaX'] * x
    ydot = p['alphaY'] * u * p['par'] / x - p['gammaY'] * y
    sxdot = -p['gammaX'] * sx + p['alphaX'] * u
    sydot = (-p['alphaY'] * u * p['par'] / x ** 2) * sx - p['gammaY'] * sy + (p['alphaY'] * u) / x

    xydot = [xdot, ydot, sxdot, sydot]
    return xydot

ffl_simulation()
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

def ffl_simulation():
    p = {
        'alphaX': 1,
        'alphaY': 1,
        'gammaX': 1,
        'gammaY': 1,
        'par': 1
    }
    t = np.arange(0, 60, 0.01)

    u = np.zeros(len(t))
    for i in range(len(t)):
        if t[i] < random_numbers[0]:
            u[i] = 1
        elif t[i] < random_numbers[1]:
            u[i] = 2
        elif t[i] < random_numbers[2]:
            u[i] = 3
        elif t[i] < random_numbers[3]:
            u[i] = 5
        else:
            u[i] = 4

    x0 = (p['alphaX'] * u[0] * p['par']) / (p['gammaX'])
    y0 = (p['alphaY'] * u[0] * p['par']) / (x0 * p['gammaY'])
    sx0 = (p['alphaX'] * u[0] * p['par']) / (p['gammaX'])
    sy0 = 0

    xy0 = [x0, y0, sx0, sy0]

    xy = odeint(iffl1, xy0, t, args=(p,u))

    plt.figure(1)
    plt.plot(t, xy[:, 0], 'k', linewidth=2)
    plt.ylabel('x')
    plt.xlabel('time')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.ylim([0.8, 6])
    plt.show()

    plt.figure(2)
    plt.plot(t, xy[:, 1], 'k', linewidth=2)
    plt.xlabel('time')
    plt.ylabel('y')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.ylim([0.8, 1.3])
    plt.show()

    plt.figure(3)
    plt.plot(t, u, 'k', linewidth=2)
    plt.xlabel('time')
    plt.ylabel('u')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.ylim([0.8, 6])
    plt.show()

def iffl1(xy0, t, p, u):
    x, y, sx, sy = xy0

    if t < random_numbers[0]:
        u = 1
    elif t < random_numbers[1]:
        u = 2
    elif t < random_numbers[2]:
        u = 3
    elif t < random_numbers[3]:
        u = 5
    else:
        u = 4

    xdot = p['alphaX'] * u * p['par'] - p['gammaX'] * x
    ydot = p['alphaY'] * u * p['par'] / x - p['gammaY'] * y
    sxdot = -p['gammaX'] * sx + p['alphaX'] * u
    sydot = (-p['alphaY'] * u * p['par'] / x ** 2) * sx - p['gammaY'] * sy + (p['alphaY'] * u) / x

    xydot = [xdot, ydot, sxdot, sydot]
    return xydot

ffl_simulation()
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

def iffl1(xy0, t, p, u):
    x, y, sx, sy = xy0

    if t < random_numbers[0]:
        u = 1
    elif t < random_numbers[1]:
        u = 2
    elif t < random_numbers[2]:
        u = 3
    elif t < random_numbers[3]:
        u = 5
    else:
        u = 4

    xdot = p['alphaX'] * u * p['par'] - p['gammaX'] * x
    ydot = p['alphaY'] * u * p['par'] / x - p['gammaY'] * y
    sxdot = -p['gammaX'] * sx + p['alphaX'] * u
    sydot = (-p['alphaY'] * u * p['par'] / x ** 2) * sx - p['gammaY'] * sy + (p['alphaY'] * u) / x

    xydot = [xdot, ydot, sxdot, sydot]
    return xydot

p = {
    'alphaX': 1,
    'alphaY': 1,
    'gammaX': 1,
    'gammaY': 1,
    'par': 1
}
t = np.arange(0, 60, 0.01)

u = np.zeros(len(t))
for i in range(len(t)):
    if t[i] < random_numbers[0]:
        u[i] = 1
    elif t[i] < random_numbers[1]:
        u[i] = 2
    elif t[i] < random_numbers[2]:
        u[i] = 3
    elif t[i] < random_numbers[3]:
        u[i] = 5
    else:
        u[i] = 4

x0 = (p['alphaX'] * u[0] * p['par']) / (p['gammaX'])
y0 = (p['alphaY'] * u[0] * p['par']) / (x0 * p['gammaY'])
sx0 = (p['alphaX'] * u[0] * p['par']) / (p['gammaX'])
sy0 = 0

xy0 = [x0, y0, sx0, sy0]

xy = odeint(iffl1, xy0, t, args=(p,u))

plt.figure(1)
plt.plot(t, xy[:, 0], 'k', linewidth=2)
plt.ylabel('x')
plt.xlabel('time')
plt.xticks(fontsize=18)
plt.yticks(fontsize=18)
plt.ylim([0.8, 6])
plt.show()

plt.figure(2)
plt.plot(t, xy[:, 1], 'k', linewidth=2)
plt.xlabel('time')
plt.ylabel('y')
plt.xticks(fontsize=18)
plt.yticks(fontsize=18)
plt.ylim([0.8, 1.3])
plt.show()

plt.figure(3)
plt.plot(t, u, 'k', linewidth=2)
plt.xlabel('time')
plt.ylabel('u')
plt.xticks(fontsize=18)
plt.yticks(fontsize=18)
plt.ylim([0.8, 6])
plt.show()
